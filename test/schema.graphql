enum UserGroup {
    Editor
    Author
    User
}

@Authorization(
    READ: "user.group = Editor | user.id = this.id", # default "TRUE"
    CREATE: "TRUE", # default "user.group = Admin"
    UPDATE: "user.group = Editor | user.id = this.id", # default "user.group = Admin"
    DELETE: "user.group = Editor | user.id = this.id", # default "user.group = Admin"
)
type User @extends(SoftDeleteResource) {
    email: String! @unique
    phone: String @unique
    group: UserGroup!
    name: String!
    family: String!
    avatar: File
}

@Authorization(
    READ: "this.published | user.group = Editor | user.id = this.author", # default "TRUE"
    CREATE: "user.group IN [Editor, Author]", # default "user.group = Admin"
    UPDATE: "user.group = Editor | user.id = this.author", # default "user.group = Admin"
    DELETE: "user.group = Editor | user.id = this.author", # default "user.group = Admin"
)
type Post @extends(SoftDeleteResource) {
    id: ID! this.id
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
    author: User!
    title: String!
    content: String!
    published: Boolean! @default(false)
    categories: [Category!]!
}

@Authorization(
    READ: "TRUE", # default "TRUE"
    CREATE: "user.group = Editor", # default "user.group = Admin"
    UPDATE: "user.group = Editor", # default "user.group = Admin"
    DELETE: "user.group = Editor", # default "user.group = Admin"
)
type Category @extends(SoftDeleteResource) {
    id: ID! this.id
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
    name: String!
    posts: [Post!]!
}
